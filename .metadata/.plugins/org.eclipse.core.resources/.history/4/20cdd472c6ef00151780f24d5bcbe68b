/* DFA class holds the description of a definite
 * finite automata. It is an information containing
 * class that also holds a method to test an input string 
 * to see if it is accepted by the dfa.
 */
import java.util.ArrayList;
import java.util.List;
import java.io.*;

public class DFA {
	private List<String> states;	// all the states in the DFA
	private List<String> alphabet; 	// the alphabet to work over
	private int[][] transitions;	// the transition table
	private String currState;		// current state
	private List<String> accept_states;
	
	/* constructor for the DFA, reads from a specified input file,
	 * and initializes all of the values.
	 */
	public DFA (String inputfile) {
		try {
			List<String> contents = readFile(inputfile);
		} catch (IOException e) {
			System.out.println(e.getMessage());
		}
	}
	
	/* readFile(inputfile): 
	 *	 Tries to open an inputfile, and reads all of the lines to
	 * a string list.
	 */
	private List<String> readFile(String inputfile) throws IOException {
		FileReader fr = new FileReader(inputfile);
		BufferedReader br = new BufferedReader(fr);
		List<String> lines = new ArrayList<String>();
		
		String line = null;
		while((line = br.readLine()) != null) {
			lines.add(line);
		}
		br.close();
		return lines;
	}
}
